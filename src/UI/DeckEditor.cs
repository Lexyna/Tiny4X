using Tiny4X.GameUtils.Card;
using Terminal.Gui.Trees;
using Terminal.Gui;

//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.23.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace Tiny4X.UI
{
    public partial class DeckEditor
    {
        private static string NEW_DECK = "new Deck";

        List<Deck> decks;

        CardDatabase db = new CardDatabase();

        public DeckEditor()
        {
            InitializeComponent();

            LoadDecks();

            LoadCardUI();
            LoadDeckUI();
        }

        private void LoadCardUI()
        {
            listView.Source = new Terminal.Gui.ListWrapper(db.GetAllCardsIds());

            listView.SelectedItemChanged += (e) =>
                       {
                           string? selected = e.Value.ToString();
                           if (selected == null) return;
                           string desc = db.GetDescription(selected);
                           textView.Text = desc;
                       };

            listView.MouseClick += (e) =>
            {
                if (e.MouseEvent.Flags != MouseFlags.Button1DoubleClicked) return;
                int selected = listView.SelectedItem;
                AddCardToDeck(db.GetAllCardsIds()[selected]);
            };
        }

        private void AddCardToDeck(string cardId)
        {
            if (treeView.SelectedObject == null) return;
            string? selected = treeView.SelectedObject.ToString();
            if (selected == null) return;
            if (selected == NEW_DECK) return;

            ICard card = db.GetCard(cardId);
            Deck? selectedDeck = decks.Find(d => d.name == selected);
            if (selectedDeck == null) return;
            if (!selectedDeck.AddCard(card)) return;
            treeView.SelectedObject.Children.Add(new TreeNode(cardId));
            treeView.RefreshObject(treeView.SelectedObject);
            treeView.Expand(treeView.SelectedObject);
        }

        private void LoadDecks()
        {
            decks = new List<Deck>();
        }

        private void CreateNewDeck(string name)
        {
            Deck deck = new Deck(name);
            decks.Add(deck);
            BuildTreeList();
        }

        private void LoadDeckUI()
        {
            TreeNode newDeck = new TreeNode(NEW_DECK);

            treeView.AddObject(newDeck);

            var openDiag = () =>
            {
                var buttons = new List<Button>();
                Button btnOk = new Button("Ok", true);
                Button btnCancel = new Button("Cancel");
                buttons.Add(btnOk);
                buttons.Add(btnCancel);

                InputDialog dialog = new InputDialog("New Deck", "Name:");
                Application.Run(dialog);

                if (dialog.value == null) return;

                Console.WriteLine($"new Deck: {dialog.value}");
                CreateNewDeck(dialog.value);
            };

            treeView.MouseClick += (e) =>
            {
                if (e.MouseEvent.Flags != MouseFlags.Button1DoubleClicked) return;
                if (treeView.SelectedObject is null) return;

                string? selected = treeView.SelectedObject.ToString();
                if (selected == null) return;
                if (selected != NEW_DECK) return;

                openDiag();
            };

        }

        private void BuildTreeList()
        {
            treeView.ClearObjects();

            foreach (Deck d in decks)
            {
                TreeNode deck = new TreeNode(d.name);
                foreach (string id in d.GetAllCardsById())
                {
                    TreeNode card = new TreeNode(id);
                    deck.Children.Add(card);
                }

                treeView.AddObject(deck);
            }
            LoadDeckUI();
        }
    }
}
