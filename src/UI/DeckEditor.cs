using Tiny4X.GameUtils.Card;
using Tiny4X.UI.DeckNodes;
using Terminal.Gui.Trees;
using Terminal.Gui;

//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.23.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace Tiny4X.UI
{
    public partial class DeckEditor
    {
        List<Deck> decks = new List<Deck>();

        CardDatabase db = new CardDatabase();

        public DeckEditor()
        {
            InitializeComponent();
            textView.Enabled = false;

            Deck testDeck = new Deck("Beginner Deck");
            Deck testDeck2 = new Deck("OPDeck");

            decks.Add(testDeck);
            decks.Add(testDeck2);

            LoadCardUI();
            BuildTreeList();
            LoadDeckUI();

            btnCreateDeck.Clicked += () => newDeckDialog();
        }

        private void LoadCardUI()
        {
            listView.Source = new Terminal.Gui.ListWrapper(db.GetAllCardsIds());

            listView.SelectedItemChanged += (e) =>
                       {
                           string? selected = e.Value.ToString();
                           if (selected == null) return;
                           string desc = db.GetDescription(selected);
                           textView.Text = desc;
                       };

            listView.MouseClick += (e) =>
            {
                if (e.MouseEvent.Flags != MouseFlags.Button1DoubleClicked) return;
                int selected = listView.SelectedItem;
                AddCardToDeck(db.GetAllCardsIds()[selected]);
            };
        }

        private void AddCardToDeck(string cardId)
        {
            if (treeView.SelectedObject == null) return;

            DeckNode selectedDeck;
            if (treeView.SelectedObject is DeckNode)
                selectedDeck = (DeckNode)treeView.SelectedObject;
            else
                selectedDeck = ((CardNode)treeView.SelectedObject).deckNode;
            ICard card = db.GetCard(cardId);
            if (!selectedDeck.deck.AddCard(card)) return;

            selectedDeck.AddChild(cardId);
            treeView.RefreshObject(selectedDeck);
            treeView.Expand(selectedDeck);
        }

        private void CreateNewDeck(string name)
        {
            Deck deck = new Deck(name);
            decks.Add(deck);
            BuildTreeList();
        }

        private void newDeckDialog()
        {
            var buttons = new List<Button>();
            Button btnOk = new Button("Ok", true);
            Button btnCancel = new Button("Cancel");
            buttons.Add(btnOk);
            buttons.Add(btnCancel);

            InputDialog dialog = new InputDialog("New Deck", "Name:");
            Application.Run(dialog);

            if (dialog.value == null) return;

            Console.WriteLine($"new Deck: {dialog.value}");
            CreateNewDeck(dialog.value);
        }

        private void LoadDeckUI()
        {
            treeView.SelectionChanged += (obj, e) =>
            {
                if (!(treeView.SelectedObject is CardNode)) return;
                CardNode selectedCard = (CardNode)treeView.SelectedObject;
                string desc = db.GetDescription(selectedCard.id);
                textView.Text = desc;
                textView.SetNeedsDisplay();
            };

            treeView.MouseClick += (e) =>
            {
                if (treeView.SelectedObject is null) return;

                if (e.MouseEvent.Flags == MouseFlags.Button3DoubleClicked)
                {
                    if (!(treeView.SelectedObject is CardNode)) return;
                    CardNode selectedCard = (CardNode)treeView.SelectedObject;
                    selectedCard.deckNode.deck.RemoveCard(selectedCard.id);
                    selectedCard.deckNode.Refresh();
                    treeView.RefreshObject(selectedCard.deckNode);
                    treeView.Expand(selectedCard.deckNode);
                }
            };

        }

        private void BuildTreeList()
        {
            treeView.ClearObjects();

            foreach (Deck d in decks)
            {
                DeckNode deckNode = new DeckNode(d);
                treeView.AddObject(deckNode);

            }
        }
    }
}